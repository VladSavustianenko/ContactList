{"version":3,"sources":["data/contacts.js","components/contactList.js","components/contactDetails.js","App.js","serviceWorker.js","index.js"],"names":["infoKeys","contacts","id","name","info","age","phoneNum","List","props","state","active","currentName","newName","delete","add","editHandle","bind","saveHandle","deleteHandle","deleteSubmit","addContact","this","detailHandler","map","contact","setState","splice","i","length","push","className","type","defaultValue","onChange","e","target","value","onClick","surname","to","details","Component","Details","currentKey","currentValue","newKey","newValue","renderDetails","addInfo","key","arr","App","detail","basename","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdb28120.chunk.js","sourcesContent":["export const infoKeys = []\r\n\r\nexport const contacts = [\r\n    {\r\n        id: 1,\r\n        name: 'John Lennon',\r\n        info: {\r\n            age: 25,\r\n        },\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Paul McCartney',\r\n        info: {\r\n            phoneNum: '096-123-45-67',\r\n        },\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Jeorge Harrison',\r\n        info: {\r\n            age: 22,\r\n            phoneNum: '096-765-43-21',\r\n        },\r\n    },\r\n]\r\n","import React, {Component} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport {contacts} from '../data/contacts'\r\n\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n          active: null,\r\n          currentName: null,\r\n          newName: null,\r\n          delete: false,\r\n          add: false\r\n        }\r\n    \r\n        this.editHandle = this.editHandle.bind(this)\r\n        this.saveHandle = this.saveHandle.bind(this)\r\n        this.deleteHandle = this.deleteHandle.bind(this)\r\n        this.deleteSubmit = this.deleteSubmit.bind(this)\r\n        this.addContact = this.addContact.bind(this)\r\n        }\r\n\r\n      details(id) {\r\n        this.props.detailHandler(id)\r\n      }\r\n    \r\n      editHandle(id) {\r\n        contacts.map(contact => (\r\n          contact.id === id ? this.setState({ active: id, currentName: contact.name, newName: contact.name })\r\n            : null\r\n        ))\r\n      }\r\n    \r\n      saveHandle() {\r\n        if (this.state.newName) {\r\n          contacts.map(contact => (\r\n            contact.id === this.state.active ? contact.name = this.state.newName : null\r\n          ))\r\n          this.setState({active: null, currentName: null, newName: null})\r\n        }\r\n      }\r\n    \r\n      deleteSubmit() {\r\n        contacts.splice(this.state.active - 1, 1)\r\n        for (let i = 0; i < contacts.length; i++) {\r\n          contacts[i].id = i + 1\r\n        }\r\n        this.setState({active: null, currentName: null, newName: null, delete: false})\r\n      }\r\n    \r\n      deleteHandle(id) {\r\n        this.setState({active: id, delete: true})\r\n      }\r\n    \r\n      addContact() {\r\n        if (this.state.newName) {\r\n          contacts.push({\r\n            id: contacts.length + 1,\r\n            name: this.state.newName,\r\n            info: {}\r\n          })\r\n          this.setState({newName: null, add: false})\r\n        }\r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <div>\r\n            <div className=\"bg-primary p-5 d-flex\">\r\n              <span className=\"text-white text-header\">Contacts.com</span>\r\n              {\r\n                this.state.active && this.state.currentName\r\n                  ? <div className=\"ml-auto\">\r\n                      <input\r\n                        type=\"text\"\r\n                        defaultValue={this.state.currentName}\r\n                        onChange={(e) => this.setState({newName: e.target.value})}\r\n                      />\r\n                      <button\r\n                        className=\"btn btn-success ml-2\"\r\n                        onClick={this.saveHandle}>\r\n                          Save\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-warning ml-2\"\r\n                        onClick={() => this.setState({active: null})}>\r\n                          Cancel\r\n                      </button>\r\n                    </div>\r\n                  : null\r\n              }\r\n              {\r\n                this.state.active && this.state.delete\r\n                  ? <div className=\"ml-auto\">\r\n                      <span className=\"text-white\">Delete?</span>\r\n                      <button\r\n                        className=\"btn btn-success ml-2\"\r\n                        onClick={this.deleteSubmit}>\r\n                          Yes\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-danger ml-2\"\r\n                        onClick={() => this.setState({active: null, delete: false})}>\r\n                          No\r\n                      </button>\r\n                    </div>\r\n                  : null\r\n              }\r\n            </div>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6 ml-auto mr-auto mt-5 main\">\r\n                  <span className=\"main-text\">Contact list</span>\r\n                  <div className=\"p-2\">\r\n                    {\r\n                      contacts.map(contact => (\r\n                        <div key={contact.id} className=\"m-1 border bg-white\">\r\n                          <span className=\"name\">{contact.name} {contact.surname}</span>\r\n                          <Link\r\n                            to={'/' + contact.id}\r\n                            className=\"btn btn-info d-inline-flex pl-1 pt-1\"\r\n                            onClick={() => this.details(contact.id)}>\r\n                            <span>Details</span>\r\n                          </Link>\r\n                          <button\r\n                            className=\"btn btn-warning ml-1\"\r\n                            onClick={() => this.editHandle(contact.id)}>\r\n                              Edit\r\n                          </button>\r\n                          <button\r\n                            className=\"btn btn-danger ml-1\"\r\n                            onClick={() => this.deleteHandle(contact.id)}>\r\n                              Delete\r\n                          </button>\r\n                        </div>\r\n                      ))\r\n                    }\r\n                    {\r\n                      this.state.add\r\n                        ? <div className=\"ml-auto\">\r\n                            <input\r\n                              type=\"text\"\r\n                              onChange={(e) => this.setState({newName: e.target.value})}\r\n                            />\r\n                            <button\r\n                              className=\"btn btn-success ml-2\"\r\n                              onClick={this.addContact}>\r\n                                Save\r\n                            </button>\r\n                            <button\r\n                              className=\"btn btn-warning ml-2\"\r\n                              onClick={() => this.setState({add: false})}>\r\n                                Cancel\r\n                            </button>\r\n                          </div>\r\n                        : null\r\n                    }\r\n                    <button\r\n                      className=\"btn btn-success\"\r\n                      onClick={() => this.setState({add: true})}>\r\n                        Add\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }    \r\n}\r\n\r\nexport default List","import React, {Component} from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport {infoKeys, contacts} from '../data/contacts'\r\n\r\nclass Details extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.id,\r\n            contact: null,\r\n            infoKeys: [],\r\n            active: null,\r\n            delete: false,\r\n            currentKey: null,\r\n            currentValue: null,\r\n            newKey: null,\r\n            newValue: null,\r\n            add: false\r\n        }\r\n\r\n        this.renderDetails = this.renderDetails.bind(this)\r\n        this.deleteHandle = this.deleteHandle.bind(this)\r\n        this.deleteSubmit = this.deleteSubmit.bind(this)\r\n        this.editHandle = this.editHandle.bind(this)\r\n        this.saveHandle = this.saveHandle.bind(this)\r\n        this.addInfo = this.addInfo.bind(this)\r\n    }\r\n\r\n    async componentDidMount() {\r\n        contacts.map(contact => (\r\n            contact.id === this.state.id ? this.setState({contact: contact.info}) : null\r\n        ))\r\n\r\n        let arr = [];\r\n        for (let key in contacts[this.state.id - 1].info) {\r\n            arr.push(key)\r\n        }\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            infoKeys[i] = arr[i]\r\n        }\r\n    }\r\n\r\n    renderDetails() {\r\n        if (infoKeys) {\r\n            return (\r\n                infoKeys.map(key => (\r\n                    <div key={key} className=\"m-1 border bg-white\">\r\n                        <span>{key}: {this.state.contact[key]}</span>\r\n                        <button\r\n                            className=\"btn btn-warning ml-1\"\r\n                            onClick={() => this.editHandle(key)}>\r\n                                Edit\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-danger ml-1\"\r\n                            onClick={() => this.deleteHandle(key)}>\r\n                                Delete\r\n                        </button>\r\n                    </div>\r\n                    )\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    editHandle(key) {\r\n        contacts.map(contact => (\r\n            contact.id === this.state.id\r\n            ? this.setState({ active: key, currentKey: key, currentValue: contact.info[key], newKey: key, newValue: contact.info[key]})\r\n            : null\r\n        ))\r\n    }\r\n    \r\n    saveHandle() {\r\n        if (this.state.newKey && this.state.newValue) {\r\n            delete contacts[this.state.id - 1].info[this.state.active]\r\n            contacts[this.state.id - 1].info[this.state.newKey] = this.state.newValue\r\n\r\n            this.setState({active: null, currentKey: null, newKey: null, currentValue: null, newValue: null})\r\n        }\r\n    }\r\n\r\n    deleteSubmit() {\r\n        delete contacts[this.state.id - 1].info[this.state.active]\r\n        this.setState({active: null, delete: false})\r\n    }\r\n\r\n    deleteHandle(key) {\r\n        this.setState({active: key, delete: true})\r\n    }\r\n\r\n    addInfo() {\r\n        if (this.state.newKey && this.state.newValue) {\r\n            contacts[this.state.id - 1].info[this.state.newKey] = this.state.newValue\r\n\r\n            this.setState({newKey: null, newValue: null, add: false})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.id) {\r\n            infoKeys.splice(0, infoKeys.length)\r\n            let arr = []\r\n            for (let key in this.state.contact) {\r\n                arr.push(key)\r\n            }\r\n            for (let i = 0; i < arr.length; i++) {\r\n                infoKeys[i] = arr[i]\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    <div className=\"bg-primary p-5 d-flex\">\r\n                        <span className=\"text-white text-header\">Contacts.com</span>\r\n                        {\r\n                            this.state.active && this.state.currentKey\r\n                            ? <div className=\"ml-auto\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    defaultValue={this.state.currentKey}\r\n                                    onChange={(e) => this.setState({newKey: e.target.value})}\r\n                                />\r\n                                <input\r\n                                    type=\"text\"\r\n                                    defaultValue={this.state.currentValue}\r\n                                    onChange={(e) => this.setState({newValue: e.target.value})}\r\n                                />\r\n                                <button\r\n                                    className=\"btn btn-success ml-2\"\r\n                                    onClick={this.saveHandle}>\r\n                                    Save\r\n                                </button>\r\n                                <button\r\n                                    className=\"btn btn-warning ml-2\"\r\n                                    onClick={() => this.setState({active: null})}>\r\n                                    Cancel\r\n                                </button>\r\n                                </div>\r\n                            : null\r\n                        }\r\n                        {\r\n                            this.state.active && this.state.delete\r\n                            ? <div className=\"ml-auto\">\r\n                                <span className=\"text-white\">Delete?</span>\r\n                                <button\r\n                                    className=\"btn btn-success ml-2\"\r\n                                    onClick={this.deleteSubmit}>\r\n                                    Yes\r\n                                </button>\r\n                                <button\r\n                                    className=\"btn btn-danger ml-2\"\r\n                                    onClick={() => this.setState({active: null, delete: false})}>\r\n                                    No\r\n                                </button>\r\n                                </div>\r\n                            : null\r\n                        }\r\n                    </div>\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6 ml-auto mr-auto mt-5 main\">\r\n                                <span className=\"main-text\">\r\n                                    {contacts.map(contact => (\r\n                                        contact.id === this.state.id ? contact.name : null\r\n                                    ))}\r\n                                </span>\r\n                                <div className=\"p-2\">\r\n                                    <this.renderDetails />\r\n                                    {\r\n                                        this.state.add\r\n                                            ? <div className=\"ml-auto\">\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    onChange={(e) => this.setState({newKey: e.target.value})}\r\n                                                />\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"ml-1\"\r\n                                                    onChange={(e) => this.setState({newValue: e.target.value})}\r\n                                                />\r\n                                                <button\r\n                                                    className=\"btn btn-success ml-2\"\r\n                                                    onClick={this.addInfo}>\r\n                                                        Save\r\n                                                </button>\r\n                                                <button\r\n                                                    className=\"btn btn-warning ml-2\"\r\n                                                    onClick={() => this.setState({add: false})}>\r\n                                                        Cancel\r\n                                                </button>\r\n                                            </div>\r\n                                            : null\r\n                                    }\r\n                                    <Link\r\n                                        to='/'\r\n                                        className=\"btn btn-info\">\r\n                                            Back\r\n                                    </Link>\r\n                                    <button\r\n                                        className=\"btn btn-success ml-2\"\r\n                                        onClick={() => this.setState({add: true})}>\r\n                                            Add\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Details","import React, {Component} from 'react'\nimport {Switch, Route, HashRouter} from 'react-router-dom'\n\nimport List from './components/contactList'\nimport Details from './components/contactDetails'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      detail: null\n    }\n\n    this.detailHandler = this.detailHandler.bind(this)\n  }\n\n  detailHandler(id) {\n    this.setState({detail: id})\n  }\n\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route path='/' exact><List detailHandler={this.detailHandler} /></Route>\n          {this.state.detail ? <Route path='/'><Details id={this.state.detail} /></Route> : null}\n        </Switch>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}